---
title: "Pseudobulk analysis retake"
format: html
editor: source
---

```{r}
suppressPackageStartupMessages({
library(DCATS)
library(Seurat)
library(SeuratData)
library(SingleCellExperiment)
library(dplyr)
library(enrichplot)
library(fgsea)
library(ggplot2)
library(ggrepel)
library(tibble)
library(tidyverse)
library(DESeq2)
})
```

# load data
```{r}
data <- readRDS("../data/annotated_data.rds")
```

# add case control ids
```{r}
data[["case_control"]] <- data@meta.data$CHIP
```

```{r}
# Convert case_control to a character vector to allow modifications
data$case_control <- as.character(data$case_control)

# Modify the case_control levels
data$case_control[data$case_control == "control"] <- "control"
data$case_control[data$case_control == "chip"] <- "case"
# View(data)
# Optionally, convert CHIP back to a factor
data$case_control <- factor(data$case_control, levels = c("control", "case"))

# Add id to condition
data$case_control_id <- paste0(data$case_control, data$donor_id)
```

# Differential Expression Analysis

Focus on significant cell types identified by DCATS for pseudo-bulk differential expression.

```{r}

# Aggregate counts to sample level
counts <- AggregateExpression(data, 
                              group.by = c("dtu_cell_type", "case_control_id"),
                              assays =  "RNA",
                              return.seurat = FALSE)
counts <- counts$RNA

# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)

# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))
# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
    rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x)) #whatever comes after the underscore in the row names will be retained in the final result.
    t(x)
})
```

### Subset the Count Matrix for a Specific Cell Type

```{r} 
counts_monocytes <- cts.split.modified$`Classical monocytes` #Classical monocytes, Non-classical monocytes, CD8+T cells
```

```{r}
colData <- data.frame(samples = colnames(counts_monocytes))

colData <- colData %>%
  dplyr::mutate(condition = ifelse(grepl('case', samples), 'case', 'control')) |>
  column_to_rownames(var = 'samples') |> 
  rownames_to_column(var = "donor")

colData$condition <- factor(colData$condition, levels = c("control", "case"))
```

### Run DESeq2

```{r}
#| warnings: false
#| output: false
# Create DESeq2 object   
dds <- DESeqDataSetFromMatrix(countData = counts_monocytes,
                              colData = colData,
                              design = ~ condition)
```

### Filter

Remove rows (genes) that have fewer than 10 reads from dds.

```{r}
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
```

Looking at the PCA from the vst transformed data

```{r}
vst <- vst(dds,
           blind = TRUE)

pca_data <- plotPCA(vst)

pca_data <- pca_data$data |> 
  as.data.frame() |>
  dplyr::rename(Disease = group) |>
  mutate(Disease = case_when(Disease == "case" ~ "CHIP", 
                             Disease == "control" ~ "Healthy donor"))

plotPCA(vst)

ggplot(data = pca_data, 
       mapping = aes(x = PC1, 
                     y = PC2, 
                     color = Disease)) + 
         geom_point(size = 3) + 
         scale_color_viridis_d() + 
  labs(x = "PC1 (40%)",
       y = "PC2 (35%)") +
  theme_bw()

```

```{r}
#| output: false
dds <- DESeq(dds)
```

Checking the contrasts

```{r}
# resultsNames(dds)
```

```{r}
# Generate results object
res <- results(dds,
               name = "condition_case_vs_control",
               alpha = 0.05)

# summary(res)
```

```{r}
# Turn the DESeq2 results object into a tibble for use with tidyverse functions
res_tbl <- res %>%
  data.frame() %>%
  rownames_to_column(var = "gene") %>%
  as_tibble() %>%
  arrange(padj)

# res_tbl

# Check results output
# res_tbl |>
#   arrange(desc(abs(log2FoldChange)))
```

Manually we find that TRBV8 gene has the highest log2FC meaning that this gene should be upregulated by cases (CHIP). We check this with the `plotCounts` function.

```{r}
# plotCounts(dds = dds, gene = "TRBV28")
```

And find that cases (CHIP) have higher expression of TRBV28. This doesn't make any sense, as TRBV28 is a part of the T-cell receptor and we have made a pseudobulk analysis of monocytes, which should not express TRBV28. We find that only CHIP patients have expression.

## Volcano plot of DE genes in monocytes

```{r}
relevant_genes <- res_tbl |> 
  filter(-log10(pvalue) > 2 & log2FoldChange > 3 | -log10(pvalue) > 2 & log2FoldChange < -3)

ggplot(data = res_tbl,
       mapping = aes(x = log2FoldChange, 
                     y = -log10(pvalue))) + 
  geom_point(alpha = 0.1) +
  geom_point(data = relevant_genes, 
             mapping = aes(x = log2FoldChange, 
                     y = -log10(pvalue),
                     color = "red")) + 
  geom_label_repel(data = relevant_genes, 
                   mapping = aes(x = log2FoldChange, 
                     y = -log10(pvalue),
                     label = gene), max.overlaps = 1000, nudge_y = 0.5) + 
  theme_bw() +
  theme(legend.position = "NULL") + 
  labs(title = "Differential gene expression in monocytes from individuals with CHIP\ncompared to healthy donors",
       subtitle = "Highlighted genes have log2FC > 3 or < -3 and p-value < 0.01") + 
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```

```{r}
# Set thresholds
padj_cutoff <- 0.99934

# Subset the significant results
sig_res <- dplyr::filter(res_tbl, padj < padj_cutoff) %>%
  dplyr::arrange(padj)

# Check significant genes output
# sig_res
```

```{r}
## Order results by padj values
top20_sig_genes <- sig_res %>%
  dplyr::arrange(padj) %>%
  dplyr::pull(gene) %>%
  head(n=20)

## Order results by log fold change
top20_sig_genes <- sig_res %>%
  dplyr::arrange(log2FoldChange) %>%
  dplyr::pull(gene) %>%
  head(n=20)
```

# fGSEA

```{r}
library(msigdbr)
```

```{r}
gsList <- readRDS("/home/projects/22102_single_cell/day5/gene_sets.Rds")
res_gsea <- res
res_gsea$genes <- rownames(res_gsea)

#Add EntrezID for the genes
library(org.Hs.eg.db)
```

```{r}
# Retrieve MSigDB gene sets
msigdb <- msigdbr(species = "Homo sapiens", category = "H")

# Convert the MSigDB data frame into a list of pathways sets
msigdb_list <- msigdb |> 
  group_by(gs_name) |> 
  summarise(gene_list = list(gene_symbol),
            .groups = "drop") |> 
  with(setNames(lapply(gene_list, unlist), gs_name))

  
```

```{r}
#| output: false
# Add EntrezID for the genes
Entrez <- AnnotationDbi::select(org.Hs.eg.db,
                                key = res_gsea$genes, 
                                columns = "ENTREZID",
                                keytype = "SYMBOL")

# Convert to tibble and merge with results
Entrez <- as_tibble(Entrez)
res_gsea <- as.data.frame(res_gsea)
res_gsea <- inner_join(res_gsea,
                  Entrez,
                  by = c("genes" = "SYMBOL"))

# Remove genes without Entrez IDs
res_gsea <- filter(res_gsea, !is.na(ENTREZID))

# Create new metric
res_gsea$stat_sig <- -log10(res_gsea$pvalue) * sign(res_gsea$log2FoldChange)

# Prepare rank data
rankData <- res_gsea$stat_sig
names(rankData) <- res_gsea$genes  # Use gene symbols for ranking
rankData <- na.omit(rankData)  # Remove NAs

```

```{r}
#| warning: false
#| output: false
# Run fgsea
fgseaRes <- fgsea(pathways = msigdb_list,
                  stats = rankData,
                  # nperm = 1000  # Adjust nperm as needed
)
# View top results
# head(fgseaRes)

```
#### start: Old database
```{r}
# Entrez <- AnnotationDbi::select(org.Hs.eg.db,
#                                 key = res$genes, 
#                                 columns = "ENTREZID",
#                                 keytype = "SYMBOL")
```

```{r}
# Entrez <- as_tibble(Entrez)
# res <- as.data.frame(res)
# res <- inner_join(res,
#                   Entrez,
#                   by = c("genes" = "SYMBOL"))
# 
# #Remove those genes that do not have an entrezid
# res <- filter(res, !is.na(ENTREZID))
# # gene_list  <- gene_list[!is.na(names(gene_list))]
```

```{r}
# #Create new metric
# res$stat_sig <- -log10(res$pvalue) * sign(res$log2FoldChange)
# rankData <- res$stat_sig
# names(rankData) <- res$genes
# head(rankData)
```

### end Old database

```{r}
# #Running fgsea algorithm:
# fgseaRes <- fgsea(pathways = gsList,
#                   stats = na.omit(rankData))

#Tidy the results
fgseaResTidy <- fgseaRes %>%
  as_tibble() %>%
  arrange(desc(NES))
```

```{r}
fgseaResTidy |> arrange(NES)
```

```{r}
# Sort the data frame based on NES in descending order to get top 10 pathways
top_10 <- fgseaResTidy %>%
  arrange(desc(NES)) %>%
  head(10)

# Sort the data frame based on NES in ascending order to get bottom 10 pathways
bottom_10 <- fgseaResTidy %>%
  arrange(NES) %>%
  head(10)

# Combine top 10 and bottom 10 pathways
top_bottom_10 <- rbind(top_10, bottom_10)

ggplot(top_bottom_10, aes(reorder(pathway, NES), NES)) +
  geom_col(aes(fill=padj<0.05)) +
  coord_flip() +
  labs(x="Pathway", y="Normalized Enrichment Score",
       title="Top 10 and Bottom 10\nHallmark pathways based\non Absolute NES\nfrom GSEA") + 
  theme_minimal()
```