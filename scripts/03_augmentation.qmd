# Set seed
```{r}
set.seed(5369553)
```

# Imports
```{r}
suppressPackageStartupMessages({
 library(Seurat)
 library(dplyr)
 library(ggplot2)
 library(patchwork)
 library(viridis)
 library(future)
})
```

# Load data
```{r}
data <- readRDS("../data/filtered_no_doublets_data.rds")
```

# Add a new meta data variable
```{r}
data[["MUTATION.GROUP_Clone"]] <- paste(data@meta.data$Clone,
                                        data@meta.data$MUTATION.GROUP,
                                        sep = "_")
```


# Integration
Split by problematic feature.
```{r}
data[["RNA"]] <- split(data[["RNA"]], f = data$donor_id)
```

Preprocess pr. subset of the feature
```{r}
#| include: false

data <- NormalizeData(data)
data <- FindVariableFeatures(data)
data <- ScaleData(data)
data <- RunPCA(data,
               reduction.name = "pca_harmony")
```

Integrate
```{r}
#| include: false

#To speed up the following process, we will work in parallel
plan("multisession", workers = 4) # Do not change it, or it might crash.
options(future.globals.maxSize = 8000 * 1024^2)

#Harmony (method=HarmonyIntegration)
data <- IntegrateLayers(
  object = data,
  method = HarmonyIntegration,
  orig.reduction = "pca_harmony",
  new.reduction = "Harmony_Integration",
  verbose = FALSE
)

#Set the future plan back to "sequential" after running integration
plan("sequential")

#Re-join the split layers
data[["RNA"]] <- JoinLayers(data[["RNA"]])
```

Run UMAP
```{r}
data <- RunUMAP(data,
                dims = 1:30,
                reduction = "Harmony_Integration",
                reduction.name = "umap_harmony")
```

Find clusters
```{r}
#| echo: false
#| messages: false

reductions <- c("RNA_snn_res.0.1",                      
                "RNA_snn_res.0.15",                         
                "RNA_snn_res.0.2",                         
                "RNA_snn_res.0.25",                         
                "RNA_snn_res.0.3",                         
                "RNA_snn_res.0.35")
reductions_new <- c("ni.0.1",                      
                    "ni.0.15",                         
                    "ni.0.2",                         
                    "ni.0.25",                         
                    "ni.0.3",                         
                    "ni.0.35")
integrated_reductions_new <- c("i.0.1",                      
                               "i.0.15",                         
                               "i.0.2",                         
                               "i.0.25",                         
                               "i.0.3",                         
                               "i.0.35")

for (i in seq_along(reductions)) {
  colnames(data@meta.data)[colnames(data@meta.data) == reductions[[i]]] <- reductions_new[[i]]
}


data <- FindNeighbors(data,
                      dims = 1:30,
                      reduction = "Harmony_Integration")
data <- FindClusters(data,
                     resolution = c(0.1, 0.15, 0.2, 0.25, 0.3, 0.35))

for (i in seq_along(reductions)) {
  colnames(data@meta.data)[colnames(data@meta.data) == reductions[[i]]] <- integrated_reductions_new[[i]]
}
```

Visualize UMAP comparing before and after integration
```{r}
p1 <- DimPlot(data,
              reduction = 'UMAP',
              group.by = 'donor_id') +
  ggtitle("Pre-integration UMAP")
p2 <- DimPlot(data,
              reduction = "umap_harmony",
              group.by = "donor_id") +
  ggtitle("Post-integration UMAP")

wrap_plots(p1, p2, nrow = 1) +
  plot_layout(guides = "collect")
ggsave("../results/03/umap_donor_id.png")
```

```{r}
p1 <- DimPlot(data,
              reduction = 'UMAP',
              group.by = 'cell_type',
              label = TRUE) +
  NoLegend() +
  ggtitle("Pre-integration UMAP")
p3 <- DimPlot(data,
              reduction = "umap_harmony",
              group.by = "cell_type",
              label = TRUE) +
  NoLegend() +
  ggtitle("Post-integration UMAP")

wrap_plots(p1, p3, nrow = 1) +
  plot_layout(guides = "collect")
ggsave("../results/03/umap_cell_type.png")
```

See Tileplots again
```{r}
# Assuming your data variables are defined as in the example
contingency_table <- table(data$donor_disease,
                           data@meta.data$i.0.3) |>
  as.data.frame()
colnames(contingency_table) <- c("DonorID", "Cluster", "Count")

# Scale data pr. Donor
contingency_table <- contingency_table |>
  group_by(DonorID) |>
  mutate(Count_scaled = Count / sum(Count))

ggplot(contingency_table, aes(x = Cluster,
                              y = DonorID,
                              fill = Count_scaled)) +
  geom_tile() +
  scale_fill_viridis_c(option = "D") + # Option "D" is one of the default viridis color maps
  theme_minimal() +
  labs(title = "Tileplot of Donor ID and Cluster (scaled pr. donor)",
       x = "Cluster",
       y = "Donor ID",
       fill = "Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = "../results/03/tileplot_donor_post.png")
```

```{r}
# Assuming your raw_data variables are defined as in the example
contingency_table <- table(raw_data$donor_disease,
                           raw_data@meta.data$RNA_snn_res.0.7) |>
  as.data.frame()
colnames(contingency_table) <- c("DonorID", "Cluster", "Count")

# Scale data pr. cluster
contingency_table <- contingency_table |>
  group_by(Cluster) |>
  mutate(Count_scaled = Count / sum(Count))


ggplot(contingency_table, aes(x = Cluster,
                              y = DonorID,
                              fill = Count_scaled)) +
  geom_tile() +
  scale_fill_viridis_c(option = "D") + # Option "D" is one of the default viridis color maps
  theme_minimal() +
  labs(title = "Tileplot of Donor ID and Cluster (scaled pr. cluster)",
       x = "Cluster",
       y = "Donor ID",
       fill = "Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = "../results/03/tileplot_cluster_post.png")
```


```{r}
views <- c("CHIP", "ProjectID", "MUTATION.GROUP", "LANE", "Clone",
           "disease", "sex", "self_reported_ethnicity",
           "development_stage", "donor_id", "donor_disease", "MUTATION.GROUP_Clone")

for (view in views) {
  p <- DimPlot(data,
               reduction = "umap_harmony",
               group.by = view)
  print(p)
  ggsave(glue::glue("../results/03/umap_{view}.png"))
} 
```

# Save object
```{r}
saveRDS(data, "../data/augmented_data.rds")
```
