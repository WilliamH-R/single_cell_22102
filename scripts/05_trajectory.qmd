# Imports
```{r}
suppressPackageStartupMessages({
  library(slingshot)
  library(Seurat)
  library(SingleCellExperiment)
  library(tradeSeq)
  library(dplyr)
  library(patchwork)
  library(ggplot2)
  library(future)
  library(clustree)
})
```

# Load data
```{r}
data <- readRDS("../data/annotated_data.rds")

data[["MUTATION.GROUP_Clone"]] <- paste(data@meta.data$Clone,
                                        data@meta.data$MUTATION.GROUP,
                                        sep = "_")
```

# Subset data
```{r}
# Remove NA values in Clone
data <- data |>
  subset(subset = dtu_cell_type %in% c("Classical monocytes",
                                       "Non-classical monocytes") &
           MUTATION.GROUP_Clone %in% c("NA_none", "Mutant_DNMT3A", "Mutant_TET2",
                                       "Wildtype_DNMT3A", "Wildtype_TET2"))

data@meta.data$Clone <- droplevels(data@meta.data$Clone)

# data <- data |>
#   subset(subset = dtu_cell_type %in% c("Classical monocytes",
#                                        "Non-classical monocytes"))

data@meta.data$dtu_cell_type <- droplevels(data@meta.data$dtu_cell_type)
```

# Look at whether data is integrated before doing the integration
Scaled across donors.
```{r}
# Assuming your data variables are defined as in the example
contingency_table <- table(data$donor_disease,
                           data@meta.data$dtu_cell_type) |>
  as.data.frame()
colnames(contingency_table) <- c("DonorID", "Cluster", "Count")

# Scale data pr. Donor
contingency_table <- contingency_table |>
  group_by(DonorID) |>
  mutate(Count_scaled = Count / sum(Count))

ggplot(contingency_table, aes(x = Cluster,
                              y = DonorID,
                              fill = Count_scaled)) +
  geom_tile() +
  scale_fill_viridis_c(option = "D") + # Option "D" is one of the default viridis color maps
  theme_minimal() +
  labs(title = "Tileplot of Donor ID and Cluster (scaled pr. donor)",
       x = "Cluster",
       y = "Donor ID",
       fill = "Fraction") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = "../results/05/tileplot_donor_pre.png")
```

Scaled across clusters.
```{r}
# Assuming your raw_data variables are defined as in the example
contingency_table <- table(data$donor_disease,
                           data@meta.data$dtu_cell_type) |>
  as.data.frame()
colnames(contingency_table) <- c("DonorID", "Cluster", "Count")

# Scale data pr. cluster
contingency_table <- contingency_table |>
  group_by(Cluster) |>
  mutate(Count_scaled = Count / sum(Count))


ggplot(contingency_table, aes(x = Cluster,
                              y = DonorID,
                              fill = Count_scaled)) +
  geom_tile() +
  scale_fill_viridis_c(option = "D") + # Option "D" is one of the default viridis color maps
  theme_minimal() +
  labs(title = "Tileplot of Donor ID and Cluster (scaled pr. cluster)",
       x = "Cluster",
       y = "Donor ID",
       fill = "Fraction") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = "../results/05/tileplot_cluster_pre.png")
```

# Re-integrate
```{r}
#| include: false

data[["RNA"]] <- split(data[["RNA"]], f = data$donor_id)

data <- NormalizeData(data)
data <- FindVariableFeatures(data)
data <- ScaleData(data)
data <- RunPCA(data,
               reduction.name = "pca_for_harmony")

#To speed up the following process, we will work in parallel
plan("multisession", workers = 4) # Do not change it, or it might crash.
options(future.globals.maxSize = 8000 * 1024^2)

#Harmony (method=HarmonyIntegration)
data <- IntegrateLayers(
  object = data,
  method = HarmonyIntegration,
  orig.reduction = "pca_for_harmony",
  new.reduction = "Harmony_Integration_subset",
  verbose = FALSE
)

#Set the future plan back to "sequential" after running integration
plan("sequential")

#Re-join the split layers
data[["RNA"]] <- JoinLayers(data[["RNA"]])
```

# Find clusters
```{r}
#| include: false

resolution <- c(0.01, 0.025, 0.05, 0.1, 0.2)

data <- FindNeighbors(data,
                      reduction = "Harmony_Integration_subset",
                      dims = 1:20)
data <- FindClusters(data,
                     resolution = resolution)
```

# Set idents
We use `"Harmony_Integration_subset"` reduction to use the integrated data.
```{r}
reduction_to_use <- "Harmony_Integration_subset"
for (res in resolution) {
  p <- DimPlot(data,
               reduction = reduction_to_use,
               group.by = glue::glue("RNA_snn_res.{res}"),
               label = TRUE)
  print(p)
  ggsave(p, filename = glue::glue("../results/05/cluster_resolution_{res}.png"))
}

clustree(data, prefix = "RNA_snn_res.")
ggsave(filename = "../results/05/clustree.png", height = 7)

# Show cell types and mutation
DimPlot(data,
        reduction = reduction_to_use,
        group.by = "dtu_cell_type",
        label = TRUE)
ggsave(filename = "../results/05/cell_types.png")

DimPlot(data,
        reduction = reduction_to_use,
        group.by = "Clone",
        label = TRUE)
ggsave(filename = "../results/05/clone.png")
DimPlot(data,
        reduction = reduction_to_use,
        group.by = "disease",
        label = TRUE)
ggsave(filename = "../results/05/disease.png")
DimPlot(data,
        reduction = reduction_to_use,
        group.by = "MUTATION.GROUP_Clone",
        label = TRUE)
ggsave(filename = "../results/05/MUTATION_GROUP_Clone.png")
DimPlot(data,
        reduction = reduction_to_use,
        group.by = "donor_disease",
        label = TRUE)
ggsave(filename = "../results/05/donor_disease.png")
```
Set idents
```{r}
Idents(data) <- "RNA_snn_res.0.025"
```

# Look at whether data is integrated now
Scaled across donors.
```{r}
# Assuming your data variables are defined as in the example
contingency_table <- table(data$donor_disease,
                           data@meta.data$RNA_snn_res.0.025) |>
  as.data.frame()
colnames(contingency_table) <- c("DonorID", "Cluster", "Count")

# Scale data pr. Donor
contingency_table <- contingency_table |>
  group_by(DonorID) |>
  mutate(Count_scaled = Count / sum(Count))

ggplot(contingency_table, aes(x = Cluster,
                              y = DonorID,
                              fill = Count_scaled)) +
  geom_tile() +
  scale_fill_viridis_c(option = "D") + # Option "D" is one of the default viridis color maps
  theme_minimal() +
  labs(title = "Tileplot of Donor ID and Cluster (scaled pr. donor)",
       x = "Cluster",
       y = "Donor ID",
       fill = "Fraction") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = "../results/05/tileplot_donor_post.png")
```

Scaled across clusters.
```{r}
# Assuming your raw_data variables are defined as in the example
contingency_table <- table(data$donor_disease,
                           data@meta.data$RNA_snn_res.0.025) |>
  as.data.frame()
colnames(contingency_table) <- c("DonorID", "Cluster", "Count")

# Scale data pr. cluster
contingency_table <- contingency_table |>
  group_by(Cluster) |>
  mutate(Count_scaled = Count / sum(Count))


ggplot(contingency_table, aes(x = Cluster,
                              y = DonorID,
                              fill = Count_scaled)) +
  geom_tile() +
  scale_fill_viridis_c(option = "D") + # Option "D" is one of the default viridis color maps
  theme_minimal() +
  labs(title = "Tileplot of Donor ID and Cluster (scaled pr. cluster)",
       x = "Cluster",
       y = "Donor ID",
       fill = "Fraction") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = "../results/05/tileplot_cluster_post.png")
```

# Work with ALL clusters
## Run trajectory analysis
```{r}
pal <- c(RColorBrewer::brewer.pal(9, "Set1"),
         RColorBrewer::brewer.pal(8, "Set2"))

dimred <- data@reductions$Harmony_Integration_subset@cell.embeddings
clustering <- data$RNA_snn_res.0.1

var_features<- VariableFeatures(data)
counts<- as.matrix(data@assays$RNA$counts[var_features, ])

set.seed(1)
lineages <- getLineages(data = dimred,
                        clusterLabels = clustering,
                        start.clus = "0"
                        )#define where to start the trajectories
```

Visualize
```{r}
# Plot the lineages
par(mfrow = c(1, 2))

plot(dimred[, 1:2],
     col = pal[clustering],
     cex = 0.7,
     pch = 16)

for (i in levels(clustering)) {
    text(mean(dimred[clustering == i, 1]),
         mean(dimred[clustering == i, 2]),
         labels = i,
         font = 2)
}

plot(dimred[, 1:2],
     col = pal[clustering],
     cex = 0.5,
     pch = 16)

lines(SlingshotDataSet(lineages),
      lwd=2,
      type = 'lineages',
      col = c("black"))
```

## Differentially expressed genes between lineages
```{r}
# We will use 200 most variable, not 2000 to reduce time
data <- FindVariableFeatures(data, nfeatures = 200)
var_features <- VariableFeatures(data)

# Subset the count matrix with these variable features
counts <- as.matrix(data@assays$RNA$counts[var_features, ])

curves <- getCurves(SlingshotDataSet(lineages),
                    approx_points = 500,
                    thresh = 0.01,
                    stretch = 0.8,
                    allow.breaks = TRUE,
                    shrink = 0.99)

set.seed(42)

sce <- fitGAM(counts = as.matrix(counts),
              sds = curves)
```

```{r}
plotGeneCount(curves,
              counts,
              clusters = clustering,
              models = sce)
ggsave(filename = "../results/05/slingshot.png")
```

Helper function for plotting a gene's differential expression
```{r}
plot_differential_expression <- function(feature_id) {
  plots <- patchwork::wrap_plots(
    plotGeneCount(curves,
                  counts,
                  clusters = clustering,
                  models = sce,
                  gene = feature_id) +
      guides(colour=guide_colourbar(title = glue::glue("logged count of
                                                       gene {feature_id}"))),
    plotSmoothers(sce,
                  counts,
                  gene = feature_id)
  )
  
  # Add a common title with plot_annotation
  plots + patchwork::plot_annotation(title = paste("Feature ID:", feature_id))
}
```


```{r}
different_end_association <- diffEndTest(sce)
different_end_association$feature_id <- rownames(different_end_association)

feature_id <- different_end_association |>
  filter(pvalue < 0.05) |>
  arrange(desc(waldStat)) |>
  dplyr::slice_head(n = 10) |>
  pull(feature_id)

print(glue::glue("Top differential genes: {feature_id}"))

plot_differential_expression(feature_id[1])
ggsave(filename = glue::glue("../results/05/slingshot_{feature_id[1]}.png"))

plot_differential_expression("TNF")
ggsave(filename = "../results/05/slingshot_TNF.png")

plot_differential_expression("IL1B")
ggsave(filename = "../results/05/slingshot_IL1B.png")

plot_differential_expression("IL6")
ggsave(filename = "../results/05/slingshot_IL6.png")

plot_differential_expression("CCL2")
ggsave(filename = "../results/05/slingshot_CCL2.png")

plot_differential_expression("FCGR3A")
ggsave(filename = "../results/05/slingshot_CFGR3A.png")
```
