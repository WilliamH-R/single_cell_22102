# Set seed
```{r}
set.seed(5369553)
```


# Imports
```{r}
library(Seurat)
library(dplyr)
library(ggplot2)
library(viridis)
library(clustree)
```

# Load RAW data
```{r}
raw_data <- readRDS("../raw_data/raw_data.rds")

raw_data[["all"]] <- "all_genes"
```
```{r}
if (!dir.exists("../results/")) {
  dir.create("../results/")
}


if (!dir.exists("../results/01/")) {
  dir.create("../results/01/")
}


if (!dir.exists("../results/02/")) {
  dir.create("../results/02/")
}


if (!dir.exists("../results/03/")) {
  dir.create("../results/03/")
}


if (!dir.exists("../results/04/")) {
  dir.create("../results/04/")
}


if (!dir.exists("../results/05/")) {
  dir.create("../results/05/")
}


if (!dir.exists("../results/06/")) {
  dir.create("../results/06/")
}


if (!dir.exists("../results/07/")) {
  dir.create("../results/07/")
}
```

# Tibble to keep track of how many cells are removed at each step
```{r}
dimensions <- tibble::tibble(step = character(),
                             n_cells = numeric(),
                             n_genes = numeric())

# Update dimensions overview
dimensions <- dimensions |>
  add_row(step = "Initial",
          n_genes = nrow(raw_data),
          n_cells = ncol(raw_data))
```


# Subset to specific subject IDs
```{r}
raw_data <- raw_data |>
  subset(subset = donor_id %in% c("CH-21-002", "CH-21-013", "CH-21-020", "CH-21-031",
                                  "CH-21-006", "CH-21-046", "CH-21-014", "CH-21-033",
                                  "CH-20-004", "CH-21-037", "CH-21-034", "CH-21-029"))

raw_data@meta.data$donor_id <- droplevels(raw_data@meta.data$donor_id)
raw_data@meta.data$donor_disease <- stringr::str_c(raw_data@meta.data$donor_id,
                                                   "_",
                                                   raw_data@meta.data$disease)

# Update dimensions overview
dimensions <- dimensions |>
  add_row(step = "Subset to specific subject IDs",
          n_genes = nrow(raw_data),
          n_cells = ncol(raw_data))
```


# Rename ENSG to gene symbol

Function to do renaming:
```{r}
RenameGenesSeurat <- function(obj,
                              newnames) {
  print("Run this before integration. It only changes obj@assays$RNA@counts, @data and @scale.data.")
  RNA <- obj@assays$RNA

  if (nrow(RNA) == length(newnames)) {
    if (length(RNA@counts)) RNA@counts@Dimnames[[1]]            <- newnames
    if (length(RNA@data)) RNA@data@Dimnames[[1]]                <- newnames
    if (length(RNA@scale.data)) RNA@scale.data@Dimnames[[1]]    <- newnames
  } else {"Unequal gene sets: nrow(RNA) != nrow(newnames)"}
  obj@assays$RNA <- RNA
  return(obj)
}
```

Apply renaming:
```{r}
raw_data <- raw_data |>
  RenameGenesSeurat(newnames = as.character(raw_data@assays[["RNA"]]@meta.features[["feature_name"]]))
```

# Remove leftover ENSG genes
```{r}
# Extract used genes
genes_used <- stringr::str_extract(as.character(raw_data@assays[["RNA"]]@meta.features[["feature_name"]]),
                                   pattern = "^(?!ENSG).+") |>
  na.omit()

# Pull the raw expression matrix from the original Seurat object containing only the genes of interest
subset_matrix <- raw_data@assays[["RNA"]]$counts[genes_used, ]

# Create a new Seurat object with just the genes of interest
seurat_new <- CreateSeuratObject(subset_matrix)

# Pull the identities from the original Seurat object as a data.frame
orig_meta <- raw_data@meta.data
orig_meta$nCount_RNA <- NULL
orig_meta$nFeature_RNA <- NULL

# Add the idents to the meta.data slot
seurat_new <- AddMetaData(object = seurat_new,
                          metadata = orig_meta)
```

## Visualize RNA counts before and after ENSG leftover genes removal
Helper function
```{r}
format_large <- function(x) {
  if (x >= 1e6) {
    paste0(round(x / 1e6, 2), "M") # Millions
  } else if (x >= 1e3) {
    paste0(round(x / 1e3, 2), "K") # Thousands
  } else {
    as.character(x) # No formatting needed
  }
}
```

Visualize nCount_RNA (the number of reads that are mapped per cell).
```{r}
raw_data@meta.data |>
  ggplot(aes(x = "",
             y = nCount_RNA)) +
  geom_violin(fill = "#619CFF", color = "#619CFF") +
  geom_text(aes(x = "",
                y = max(nCount_RNA) + 5,
                label = stringr::str_c("Genes =",
                                       nrow(raw_data),
                                       ",",
                                       "Total count =",
                                       sum(raw_data@meta.data$nCount_RNA) |>
                                         format_large(),
                                       sep = " ")), 
            vjust = 0) +
  labs(x = NULL,
       y = "RNA read counts",
       title = "Before ENSG removal")

seurat_new@meta.data |>
  ggplot(aes(x = "",
             y = nCount_RNA)) +
  geom_text(aes(x = "",
                y = max(nCount_RNA) + 5,
                label = stringr::str_c("Genes =",
                                       nrow(seurat_new),
                                       ",",
                                       "Total count =",
                                       sum(seurat_new@meta.data$nCount_RNA) |>
                                         format_large(),
                                       sep = " ")), 
            vjust = 0) +
  geom_violin(fill = "#619CFF", color = "#619CFF") +
  labs(x = NULL,
       y = "RNA read counts",
       title = "After ENSG removal")
```

Visualize nFeature_RNA (the number of genes that are detected per cell).
```{r}
raw_data@meta.data |>
  ggplot(aes(x = "",
             y = nFeature_RNA)) +
  geom_violin(fill = "#F8766D", color = "#F8766D") +
  geom_text(aes(x = "",
                y = max(nFeature_RNA) + 5,
                label = stringr::str_c("Genes =",
                                       nrow(raw_data),
                                       ",",
                                       "Total count =",
                                       sum(raw_data@meta.data$nFeature_RNA) |>
                                         format_large(),
                                       sep = " ")), 
            vjust = 0) +
  labs(x = NULL,
       y = "Gene counts",
       title = "Before ENSG removal")

seurat_new@meta.data |>
  ggplot(aes(x = "",
             y = nFeature_RNA)) +
  geom_violin(fill = "#F8766D", color = "#F8766D") +
  geom_text(aes(x = "",
                y = max(nFeature_RNA) + 5,
                label = stringr::str_c("Genes =",
                                       nrow(seurat_new),
                                       ",",
                                       "Total count =",
                                       sum(seurat_new@meta.data$nFeature_RNA) |>
                                         format_large(),
                                       sep = " ")), 
            vjust = 0) +
  labs(x = NULL,
       y = "Gene counts",
       title = "After ENSG removal")
```

## Overwrite object and clear memory
```{r}
# Overwrite the raw_data object
raw_data <- seurat_new
rm(seurat_new)
rm(orig_meta)
rm(subset_matrix)

# Update dimensions overview
dimensions <- dimensions |>
  add_row(step = "Remove leftover ENSG genes",
          n_genes = nrow(raw_data),
          n_cells = ncol(raw_data))
```

# Do we have mitochondrial genes?

## Calculate percent mitochondrial genes
Not really as mitochondrial genes have already been removed.
```{r}
mito_genes <- readr::read_tsv(file = "https://www.genenames.org/cgi-bin/genegroup/download?id=1974&type=node",
                              show_col_types = FALSE) |>
  pull(`Approved symbol`)

for (gene in mito_genes) {
  if (gene %in% rownames(raw_data)) {
    print("Found a mito gene:", gene)
  }
}
```

# Do we have ribosomal genes?
```{r}
ribo_genes <- stringr::str_extract(string = rownames(raw_data),
                    pattern = "^RP[SL].+") |>
  na.omit() |>
  unique()

for (gene in ribo_genes) {
  if (gene %in% rownames(raw_data)) {
    print(glue::glue("Found a ribo gene: {gene}"))
  }
}
```

## Calculate percent ribosomal genes if found
```{r}
raw_data[["ribo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
                                                       pattern = "^RP[SL]")

# Or by a list of ribosomal genes
# raw_data[["ribo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
#                                                        features = ribo_genes)
```

# Do we have hemoglobin genes?
```{r}
hemo_genes <- stringr::str_extract(string = rownames(raw_data),
                    pattern = "^HB.+") |>
  na.omit() |>
  unique()
hemo_genes <- hemo_genes[!hemo_genes %in% c("HBEGF", "HBS1L", "HBP1")] # Remove non-hemo manually

for (gene in hemo_genes) {
  if (gene %in% rownames(raw_data)) {
    print(glue::glue("Found a hemo gene: {gene}"))
  }
}
```

## Calculate percent hemoglobin genes
```{r}
# raw_data[["hemo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
#                                                        pattern = "^HB")

# Or by a list of hemo genes
raw_data[["hemo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
                                                       features = hemo_genes)
```

# Remove specific genes
```{r}
# remove_genes <- c("MALAT1")
# 
# for (gene in malat_genes) {
#   if (gene %in% rownames(raw_data)) {
#     print(glue::glue("Found a specific gene: {gene}"))
#     raw_data <- raw_data[!grepl(gene, rownames(raw_data)), ]
#   }
# }
# 
# # Update dimensions overview
# dimensions <- dimensions |>
#   add_row(step = "Remove leftover ENSG genes",
#           n_genes = nrow(raw_data),
#           n_cells = ncol(raw_data))
```

# Violinplot of calculated features
```{r}
features <- c("nCount_RNA",
              "nFeature_RNA",
              "percent.mt",
              #"mito_DTU",
              "ribo_DTU",
              "hemo_DTU")
for (feature in features) {
  p <- VlnPlot(raw_data,
               features = c(feature),
               alpha = 0.1,
               group.by = "all",
               layer = "counts")
  print(p)
}
```

# Counts vs Features plot
Getting metadata for a closer inspection
```{r}
meta_data <- raw_data@meta.data
```


Plotting features and counts vs mitochondrial genes
```{r}
plot_mt <- ggplot(data = meta_data,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = percent.mt)) + 
  geom_point(alpha = 0.3) + 
  scale_color_viridis() + 
  labs(color = "% mitochondrial genes") +
  theme_dark()
plot_mt



plot_hb <- ggplot(data = meta_data,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = hemo_DTU)) + 
  geom_point(alpha = 0.5) + 
  scale_color_viridis() + 
  labs(color = "% hemoglobin genes") +
  theme_dark()

plot_ribo <- ggplot(data = meta_data,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = ribo_DTU)) + 
  geom_point(alpha = 0.1) + 
  scale_color_viridis() + 
  labs(color = "% ribosomal genes") +
  theme_dark()

plot_mt / plot_hb + plot_ribo

```


# Apply filtering
```{r}
raw_data <- raw_data |>
  subset(subset = nCount_RNA > 1000 &
           nCount_RNA < 5000 &
           nFeature_RNA > 250 & # Is 250 in paper
           nFeature_RNA < 2000 &
           percent.mt < 8 &
           #mito_DTU < XXX &
           #ribo_DTU < XXX &
           hemo_DTU < 1
         )

# Update dimensions overview
dimensions <- dimensions |>
  add_row(step = "Apply filtering",
          n_genes = nrow(raw_data),
          n_cells = ncol(raw_data))
```

# Normalize
```{r}
raw_data <- NormalizeData(raw_data)
```

# Find variable features
```{r}
raw_data <- FindVariableFeatures(raw_data,
                                 nfeatures = 2000)
```

# Scale data
```{r}
raw_data <- ScaleData(raw_data)
```

# Run PCA
```{r}
raw_data <- RunPCA(raw_data)
```

## Find dimensionality
```{r}
ElbowPlot(raw_data, n = 50)
```

Decide on a number of dimensions to use
```{r}
n_dimensions <- 30
```

# Find clusters
```{r}
#| echo: false
#| messages: false

raw_data <- FindNeighbors(raw_data,
                          dims = 1:n_dimensions)
raw_data <- FindClusters(raw_data,
                         resolution = c(0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5))
```

## Find optimal resolution
```{r}
clustree(raw_data, prefix = "RNA_snn_res.")
```

Decide on a resolution
```{r}
Idents(raw_data) <- "RNA_snn_res.0.7" # e.g. "RNA_snn_res.0.3"
```

# Run UMAP
```{r}
raw_data <- RunUMAP(raw_data,
                    dims = 1:n_dimensions)
```

## Visualize different groupings

See if we observe some clear batch effects or other interesting stuff.
```{r}
views <- c("CHIP", "ProjectID", "MUTATION.GROUP", "LANE", "Clone",
           "disease", "sex", "self_reported_ethnicity",
           "development_stage", "donor_id", "donor_disease")

for (view in views) {
  p <- DimPlot(raw_data,
               reduction = "umap",
               group.by = view)
  print(p)
} 
```

# Make tile plots
Tile plot of cluster vs donor ids
```{r}
# Assuming your raw_data variables are defined as in the example
contingency_table <- table(raw_data$donor_disease,
                           raw_data@meta.data$RNA_snn_res.0.7) |>
  as.data.frame()
colnames(contingency_table) <- c("DonorID", "Cluster", "Count")

# Scale data pr. Donor
contingency_table <- contingency_table |>
  group_by(DonorID) |>
  mutate(Count_scaled = Count / sum(Count))


ggplot(contingency_table, aes(x = Cluster,
                              y = DonorID,
                              fill = Count_scaled)) +
  geom_tile() +
  scale_fill_viridis_c(option = "D") + # Option "D" is one of the default viridis color maps
  theme_minimal() +
  labs(title = "Tileplot of Donor ID and Cluster",
       x = "Cluster",
       y = "Donor ID",
       fill = "Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Save object
```{r}
saveRDS(raw_data, "../data/filtered_data.rds")
saveRDS(dimensions, "../data/dimensions.rds")
```
