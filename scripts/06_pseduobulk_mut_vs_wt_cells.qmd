---
title: "Differential gene expression on mut vs. wt cell subsets"
format: html
editor: visual
---

*Purpose of script:*
In the data we have annotated whether the cell is mutant or not and we want to ascertain whether this impacts the gene expression of the cells. 
The hypothesis is that especially the monocytes have a different gene expression as these cells are affected by the CHIP-mutations. 


## Loading data and libraries

```{r}
library(Seurat)
library(dplyr)
library(ggplot2)
library(viridis)
library(patchwork)
library(DESeq2)

obj <- readRDS(file = "../data/annotated_data.rds")
```

Exploring the data by looking at the metadata
```{r}
meta_data <- obj@meta.data
```

Filtering out unwanted variables in the metadata
```{r}
meta_data <- meta_data |> 
  select(!c(nCount_HTO, nCount_SCT, nFeature_HTO, nFeature_SCT, orig.ident, HTO_secondID, HTO_classification.global, CHIP, LANE, ProjectID, HTO_maxID, HTO_margin, ni.0.1:ni.1.5, sex_ontology_term_id, assay_ontology_term_id, suspension_type))


meta_data <- meta_data |> 
  select(!c(HTOID, pANN, development_stage_ontology_term_id, cell_type_ontology_term_id, self_reported_ethnicity_ontology_term_id, is_primary_data, tissue_type, tissue_ontology_term_id, organism_ontology_term_id, disease_ontology_term_id))

meta_data <- meta_data |> 
  select(!c(organism, observation_joinid, tissue, self_reported_ethnicity, development_stage, all, ribo_DTU, hemo_DTU, percent.mt))
```



Making table with relevant cell types and data on their mutational status
```{r}
table(meta_data$dtu_cell_type, meta_data$Clone)
```

```{r}
df_mutational_status <- table(meta_data$dtu_cell_type, meta_data$Clone)

df_mutational_status <- df_mutational_status  |> 
  as.data.frame()

df_mutational_status <- df_mutational_status |> 
  dplyr::rename(fraction = Var1, 
         mut_status = Var2, 
         number = Freq)
```

Plotting
```{r}
plot_abs_counts <- ggplot(data = df_mutational_status, 
       mapping = aes(x = fraction,
                     y = number, 
                     fill = mut_status)) +
         geom_col() +
  labs(x = "Cell population", 
       y = "Number of cells", 
       fill = "Mutational status") +
  scale_fill_viridis_d() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45)) +
  theme(axis.text.x = element_text(hjust = 1))

plot_relative_counts <- ggplot(data = df_mutational_status, 
       mapping = aes(x = fraction,
                     y = number, 
                     fill = mut_status)) +
         geom_col(position = position_fill()) +
  labs(x = "Cell population", 
       y = "Frequency of cells", 
       fill = "Mutational status") +
  scale_fill_viridis_d() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45)) +
  theme(axis.text.x = element_text(hjust = 1))


plot_abs_counts + plot_relative_counts
```
We make the same analysis with NAs removed
```{r}
plot_abs_counts_not_na <- df_mutational_status |>
  filter(!mut_status == "NA") |>
  ggplot(mapping = aes(x = fraction,
                       y = number, 
                       fill = mut_status)) +
  geom_col() +
  labs(x = "Cell population", 
       y = "Number of cells", 
       fill = "Mutational status") +
  scale_fill_viridis_d() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


plot_relative_counts_not_na <- df_mutational_status |>
  filter(!mut_status == "NA") |>
  ggplot(mapping = aes(x = fraction,,
                     y = number, 
                     fill = mut_status)) +
         geom_col(position = position_fill()) +
  labs(x = "Cell population", 
       y = "Frequency of cells", 
       fill = "Mutational status") +
  scale_fill_viridis_d() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45)) +
  theme(axis.text.x = element_text(hjust = 1))


plot_abs_counts_not_na + plot_relative_counts_not_na

```
We see that for most of the cell fractions the majority of cells are WT, wheras for classical monocytes and DC the majority are mutant. 

*To continue with the pseudobulk differential gene expression analysis we have to remove the cells that have NA in their `Clone`variable*

Removing cells with NA using subset

```{r}
obj_subset <- subset(x = obj, 
                     subset = Clone == c("Mutant", "Wildtype"))
```
Looking at metadata and removing NA as a level
```{r}
meta_subset <- obj_subset@meta.data

meta_subset <- meta_subset |> 
  mutate(Clone = droplevels(Clone))

table(meta_subset$Clone)
```



Preparing the data
```{r}
obj_subset$sample <- paste0(obj_subset$donor_id, obj_subset$Clone)


# Aggregate counts to sample level
counts <- AggregateExpression(obj_subset, 
                              group.by = c("dtu_cell_type", "sample"),
                              assays =  "RNA",
                              return.seurat = FALSE)


counts <- counts$RNA


# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)


# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))


# fix colna"CD14+ Monocyte"# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
    rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x)) #whatever comes after the underscore in the row names will be retained in the final result.
    t(x)
})
```

Looking at the generated list
```{r}
head(cts.split.modified$`B cells`)
```
We need to make a column with metadata for DESeq2.


Getting the count data for monocytes
```{r}
mono_counts <- cts.split.modified$`Classical monocytes`

sample_ids <- colnames(mono_counts)
```

Removing pre-fixes on the colData to get the design.

```{r}
colData <- str_remove(string = sample_ids, pattern = "^(.*?)(?=Mutant|Wildtype)") |> 
  as.data.frame()

base::colnames(colData) <- "condition"


```

### Differential gene expression analysis using DESeq2
First doing on monocytes as these are the most commonly mutated cells. 
Count data contained in `mono_counts`
colData contained in `colData`
The design is stratified in the `column` condition in `colData`.

Doing the DESeq2
```{r}
dds_monos <- DESeqDataSetFromMatrix(countData = mono_counts, 
                                    colData = colData, 
                                    design = ~ condition)
```
We perform pre-filtering
```{r}
keep <- rowSums(counts(dds_monos)) >= 10
dds_monos <- dds_monos[keep,]
```


Making PCA on VST transformed data
```{r}
vst_monos <- vst(object = dds_monos, blind = T)

plotPCA(vst_monos)
```

Looking at the levels of the condition
```{r}
levels(dds_monos$condition)
```

Running DESeq2
```{r}
dds_monos <- DESeq(object = dds_monos)
```
Looking at disperson estimates
```{r}
plotDispEsts(object = dds_monos)
```
Looking fine

Getting results
```{r}
res_monos <- results(dds_monos, contrast=c("condition","Mutant","Wildtype"), alpha = 0.1)

summary(res_monos)
```
Most surprisingly, no genes are DE!


Converting to a dataframe
```{r}
res_monos_df <- res_monos |> 
  as.data.frame() |> 
  rownames_to_column(var = "gene")  |> 
  as_tibble() |>
  arrange(padj)

View(res_monos_df)
```

## Gene set enrichment analysis

Loading a gene list
```{r}
gs_list <- readRDS("/home/projects/22102_single_cell/day5/gene_sets.Rds")
```



```{r}
res_monos$genes <- rownames(res_monos)

#Add EntrezID for the genes
library(org.Hs.eg.db)

Entrez <- AnnotationDbi::select(org.Hs.eg.db,
                                    key= res_monos$genes, 
                                    columns="ENTREZID",
                                    keytype="SYMBOL")
Entrez <- as_tibble(Entrez)
dds_results <- as.data.frame(res_monos)
dds_results <- inner_join(dds_results, Entrez, by=c("genes"="SYMBOL"))
#Remove those genes that do not have an entrezid
dds_results <- filter(dds_results, !is.na(ENTREZID))
```


```{r}
#Create new metric
dds_results$stat_sig <- -log10(dds_results$pvalue) * sign(dds_results$log2FoldChange)
rankData <- dds_results$stat_sig # Takes out the vector stat_sign with the calculated values
names(rankData) <- dds_results$genes # Takes out the names of the genes in results and assigns it as names in the vector - THIS IS NEW. 
head(rankData)
```

rankData contains non-finite numbers. 
```{r}
sum(!is.finite(rankData))
```
In total 24 non-finites.


We could remove these
```{r}
rankData <- rankData[is.finite(rankData)]
```

Running fgsea
```{r}
gsea_df <- fgsea(pathways = gs_list, 
      stats = rankData)

View(gsea_df)
```


Taking bottom and top GSEA pathways
```{r}
gsea_top10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(desc(NES)) |> 
  dplyr::top_n(n = 10, wt = NES)


gsea_bottom10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(NES) |> 
  head(10)

gsea_bound <- rbind(gsea_bottom10, gsea_top10) |> 
  mutate(sign = case_when(padj < 0.05 ~ "significant", 
                          padj >  0.05 ~ "NS"))
```


Plotting
```{r}
library(forcats)

ggplot(data = gsea_bound, 
         mapping = aes(x = NES, 
                     y = fct_reorder(pathway, NES),
                     fill = sign)) +
  geom_col()
```


