---
title: "Differential gene expression on mut vs. wt cell subsets"
format: html
editor: visual
---

*Purpose of script:* In the data we have annotated whether the cell is mutant or not and we want to ascertain whether this impacts the gene expression of the cells. The hypothesis is that especially the monocytes have a different gene expression as these cells are affected by the CHIP-mutations.

Loading data and libraries

```{r}
library(Seurat)
library(dplyr)
library(ggplot2)
library(viridis)
library(patchwork)
library(DESeq2)
library(stringr)

obj <- readRDS(file = "../data/annotated_data.rds")
```

# Exploratory data analysis

Exploring the data by looking at the metadata

```{r}
meta_data <- obj@meta.data |> 
  as.data.frame()
```

Filtering out unwanted variables in the metadata

```{r}
meta_data <- meta_data |> 
  dplyr::select(!c(nCount_HTO, nCount_SCT, nFeature_HTO, nFeature_SCT, orig.ident, HTO_secondID, HTO_classification.global, CHIP, LANE, ProjectID, HTO_maxID, HTO_margin, ni.0.1:ni.1.5, sex_ontology_term_id, assay_ontology_term_id, suspension_type))


meta_data <- meta_data |> 
  dplyr::select(!c(HTOID, pANN, development_stage_ontology_term_id, cell_type_ontology_term_id, self_reported_ethnicity_ontology_term_id, is_primary_data, tissue_type, tissue_ontology_term_id, organism_ontology_term_id, disease_ontology_term_id))

meta_data <- meta_data |> 
  dplyr::select(!c(organism, observation_joinid, tissue, self_reported_ethnicity, development_stage, all, ribo_DTU, hemo_DTU, percent.mt))
```

Making table with relevant cell types and data on their mutational status

```{r}
table(meta_data$dtu_cell_type, meta_data$Clone)
```

So we have 3450 mutant monocytes, 3973 NA monocytes and only 562 classical monocytes.

```{r}
df_mutational_status <- table(meta_data$dtu_cell_type, meta_data$Clone)

df_mutational_status <- df_mutational_status  |> 
  as.data.frame()

df_mutational_status <- df_mutational_status |> 
  dplyr::rename(fraction = Var1, 
         mut_status = Var2, 
         number = Freq)
```

Plotting

```{r}
plot_abs_counts <- ggplot(data = df_mutational_status, 
       mapping = aes(x = fraction,
                     y = number, 
                     fill = mut_status)) +
         geom_col() +
  labs(x = "Cell population", 
       y = "Number of cells", 
       fill = "Mutational status") +
  scale_fill_viridis_d() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45)) +
  theme(axis.text.x = element_text(hjust = 1))

plot_relative_counts <- ggplot(data = df_mutational_status, 
       mapping = aes(x = fraction,
                     y = number, 
                     fill = mut_status)) +
         geom_col(position = position_fill()) +
  labs(x = "Cell population", 
       y = "Frequency of cells", 
       fill = "Mutational status") +
  scale_fill_viridis_d() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45)) +
  theme(axis.text.x = element_text(hjust = 1))


plot_abs_counts + plot_relative_counts
```

We make the same analysis with NAs removed

```{r}
plot_abs_counts_not_na <- df_mutational_status |>
  filter(!mut_status == "NA") |>
  ggplot(mapping = aes(x = fraction,
                       y = number, 
                       fill = mut_status)) +
  geom_col() +
  labs(x = "Cell population", 
       y = "Number of cells", 
       fill = "Mutational status") +
  scale_fill_viridis_d() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


plot_relative_counts_not_na <- df_mutational_status |>
  filter(!mut_status == "NA") |>
  ggplot(mapping = aes(x = fraction,,
                     y = number, 
                     fill = mut_status)) +
         geom_col(position = position_fill()) +
  labs(x = "Cell population", 
       y = "Frequency of cells", 
       fill = "Mutational status") +
  scale_fill_viridis_d() +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45)) +
  theme(axis.text.x = element_text(hjust = 1))


plot_abs_counts_not_na + plot_relative_counts_not_na
```

We see that for most of the cell fractions the majority of cells are WT, wheras for classical monocytes and DC the majority are mutant.

*To continue with the pseudobulk differential gene expression analysis we have to remove the cells that have NA in their `Clone`variable*

Removing cells with NA using subset

```{r}
obj_subset <- subset(x = obj, 
                     subset = Clone %in% c("Mutant", "Wildtype"))

### This gives us an object which only contains cells that have had DNASeq performed, so we have their mutational status.
```

Looking at metadata and removing NA as a level

```{r}
meta_subset <- obj_subset@meta.data

meta_subset <- meta_subset |> 
  mutate(Clone = droplevels(Clone))

table(meta_subset$dtu_cell_type, meta_subset$Clone)

```

We have omitted that we are working with two mutational groups - TET2 and DNMT3A. We make new variable which describes the type of mutation in each cell in which a mutation was identified.

```{r}
meta_subset <- meta_subset |> 
  mutate(Clone_group = case_when(Clone == "Wildtype" ~ "Wildtype",
                           MUTATION.GROUP == "DNMT3A" ~ "DNMT3A",
                           MUTATION.GROUP == "TET2" ~ "TET2"))

tab1 <- table(meta_subset$dtu_cell_type, meta_subset$Clone_group)
tab1
```

Make it as a dataframe and graphing out

```{r}
tab1 <- tab1 |> 
  as.data.frame() |> 
  dplyr::rename(fraction = Var1, 
                mutation = Var2, 
                count = Freq)
```

Plot

```{r}
plot1 <- ggplot(data = tab1, 
                mapping = aes(x = fraction, 
                              y = count, 
                              fill = mutation)) + 
  geom_col() +
  theme_bw() +
  scale_fill_viridis_d() +
  theme(axis.text.x = element_text(angle = 45)) +
  theme(axis.text.x = element_text(hjust = 1)) +
  labs(x = "Cluster", 
       y = "Number of cells", 
       fill = "Mutation")


plot2 <- ggplot(data = tab1, 
                mapping = aes(x = fraction, 
                              y = count, 
                              fill = mutation)) + 
  geom_col(position = position_fill()) +
  theme_bw() +
  scale_fill_viridis_d() +
  theme(axis.text.x = element_text(angle = 45)) +
  theme(axis.text.x = element_text(hjust = 1)) +
  labs(x = "Cluster", 
       y = "Percentage of cells", 
       fill = "Mutation")

plot1 + plot2
```

Based on these data we should preferably perform pseudobulk RNASeq on DNTM3A vs. Wildtype and TET2 vs. Wildtype So we need to subset the object based on these data.

Firstly we need to provide the new metadata into the seurat object

```{r}
obj_subset <- AddMetaData(object = obj_subset, metadata = meta_subset)
```

And then we subset on the variable Clone_group to make two seurat objects.

```{r}
obj_dnmt3a <- subset(obj_subset,
                     subset = Clone_group %in% c("DNMT3A", "Wildtype"))

table(obj_dnmt3a@meta.data$Clone_group, obj_dnmt3a@meta.data$dtu_cell_type)


obj_tet2 <- subset(obj_subset,
                     subset = Clone_group %in% c("TET2", "Wildtype"))

table(obj_tet2@meta.data$Clone_group, obj_tet2@meta.data$dtu_cell_type)
```

*So now we can perform DGE analysis on both TET2 mutants and DNMT3A mutants vs. wildtypes*

# Differential gene expression analysis

## TET2 analysis

Preparing the data

```{r}
obj_tet2$sample <- paste0(obj_tet2$donor_id, obj_tet2$Clone)


# Aggregate counts to sample level
counts <- AggregateExpression(obj_tet2, 
                              group.by = c("dtu_cell_type", "sample"),
                              assays =  "RNA",
                              return.seurat = FALSE)


counts <- counts$RNA


# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)


# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))


# fix colna"CD14+ Monocyte"# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
    rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x)) #whatever comes after the underscore in the row names will be retained in the final result.
    t(x)
})
```

Looking at the generated list

```{r}
head(cts.split.modified$`B cells`)
```

We need to make a column with metadata for DESeq2.

Getting the count data for monocytes

```{r}
mono_counts <- cts.split.modified$`Classical monocytes`

sample_ids <- colnames(mono_counts)
```

Removing pre-fixes on the colData to get the design.

```{r}
colData <- str_remove(string = sample_ids, pattern = "^(.*?)(?=Mutant|Wildtype)") |> 
  as.data.frame()

base::colnames(colData) <- "condition"
```

We also want the donor IDs, so we can include the donors in the colData. We get the donor names from the sample IDs
```{r}
donor_id <- str_remove(string = sample_ids, pattern = "(Mutant|Wildtype)")
donor_id

colData$donor_id <- donor_id

colData
```



### Differential gene expression analysis using DESeq2

First doing on monocytes as these are the most commonly mutated cells. Count data contained in `mono_counts` colData contained in `colData` The design is stratified in the `column` condition in `colData`.

Doing the DESeq2

```{r}
dds <- DESeqDataSetFromMatrix(countData = mono_counts, 
                                    colData = colData, 
                                    design = ~ donor_id + condition)
```

We perform pre-filtering

```{r}
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
```

Making PCA on VST transformed data
```{r}
library(tidyr)
library(ggrepel)

### Using the VST transformation to get out VST data for the PCA
vst <- vst(object = dds, 
           blind = F)

### Getting counts from the vst object
transformed_data <- assay(vst)


## Performing PC analysis on the data that were taken out from the vst object
pc <- prcomp(t(transformed_data), scale. = T)

## Getting loadings
loadings <- pc |> 
  broom::tidy("rotation") |> 
  pivot_wider(names_from = "PC",
              names_prefix = "PC", 
              values_from = "value") |> 
  arrange(desc(abs(PC1))) |> 
  head(10)

arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)

ggplot(data = loadings, 
       mapping = aes(x = PC1, 
                     y = PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) + 
  geom_label_repel(aes(label = column,
                       max.overlaps = Inf, 
                       force = 3)
                   ) + 
  theme_minimal() + 
  labs(title = "Rotations")
```




```{r}
pc_df <- plotPCA(vst)

plotPCA(vst)

pc_df <- pc_df$data |> 
  as.data.frame()

#Extracting donor names
pc_df <- pc_df |> 
  mutate(donor = str_remove(name, pattern = "(Wildtype|Mutant)$"))

# Plotting
ggplot(data = pc_df, 
       mapping = aes(x = PC1, 
                     y = PC2,
                     color = donor,
                     shape = group)) +
  geom_point(size = 3) +
  theme_bw() +
  labs(color = "Donor", 
       shape = "Mutational status",
       x = "PC1 (85% variance)",
       y = "PC2 (11% variance)") +
  scale_color_viridis_d()

```

Plot above shows that we should not have unpaired samples in the dataframe, as they are highly different in the PCA compared to the paired samples. So much variation in the data could be ascribed to between-donor variation and not due to the mutations in the cells.

We perform the DGE analysis anyway.
```{r}
dds <- DESeq(dds)
```

Plotting dispersion estimates
```{r}
plotDispEsts(dds)
```
Getting results
```{r}
res <- results(dds, contrast=c("condition","Mutant","Wildtype"), alpha = 0.05)

summary(res)
```
No DE genes. 

Getting a dataframe with the results
```{r}
library(tibble)

res_df <- res |> 
  as.data.frame() |>
  rownames_to_column(var = "gene")

View(res_df)
```

Making Volcano plot on p-values (not p-adjusted though)
```{r}
ggplot(data = res_df, 
       mapping = aes(x = log2FoldChange,
                     y = -log10(pvalue))) + 
  geom_point(alpha = 0.2) + 
  geom_point(data = res_df |> 
               filter(-log10(pvalue) > 1.303),
             mapping = aes(x = log2FoldChange, 
                                 y = -log10(pvalue),
                                 label = gene, 
                           color = "red")) +
  geom_label_repel(data = res_df |> 
                     filter(-log10(pvalue) > 1.303), 
                     mapping = aes(x = log2FoldChange, 
                                 y = -log10(pvalue),
                                 label = gene)) +
  theme_bw() +
  labs(title = "Volcano plot of differentially expresssed genes by\nTET2mut vs. TET2wt monocytes",
       subtitle = "Highlighted genes have p-value < 0.05") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) +
  theme(legend.position = "null")
```

### Gene set enrichment analysis
Loading a gene list

```{r}
gs_list <- readRDS("/home/projects/22102_single_cell/day5/gene_sets.Rds")
```

```{r}
res$genes <- rownames(res)

#Add EntrezID for the genes
library(org.Hs.eg.db)

Entrez <- AnnotationDbi::select(org.Hs.eg.db,
                                    key= res$genes, 
                                    columns="ENTREZID",
                                    keytype="SYMBOL")
Entrez <- as_tibble(Entrez)
dds_results <- as.data.frame(res)
dds_results <- inner_join(dds_results, Entrez, by=c("genes"="SYMBOL"))
#Remove those genes that do not have an entrezid
dds_results <- filter(dds_results, !is.na(ENTREZID))
```

```{r}
#Create new metric
dds_results$stat_sig <- -log10(dds_results$pvalue) * sign(dds_results$log2FoldChange)
rankData <- dds_results$stat_sig # Takes out the vector stat_sign with the calculated values
names(rankData) <- dds_results$genes # Takes out the names of the genes in results and assigns it as names in the vector - THIS IS NEW. 
head(rankData)
```

rankData contains non-finite numbers.

```{r}
sum(!is.finite(rankData))
```

In total 24 non-finites.

We could remove these

```{r}
rankData <- rankData[is.finite(rankData)]
```

Running fgsea

```{r}
library(fgsea)
gsea_df <- fgsea(pathways = gs_list, 
      stats = rankData)

View(gsea_df)
```

Taking bottom and top GSEA pathways

```{r}
gsea_top10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(desc(NES)) |> 
  dplyr::top_n(n = 10, wt = NES)


gsea_bottom10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(NES) |> 
  head(10)

gsea_bound <- rbind(gsea_bottom10, gsea_top10) |> 
  mutate(sign = case_when(pval < 0.05 ~ "significant", 
                          pval >  0.05 ~ "NS"))
```

Plotting

```{r}
library(forcats)

ggplot(data = gsea_bound, 
         mapping = aes(x = NES, 
                     y = fct_reorder(pathway, NES),
                     fill = sign)) +
  geom_col() + 
  labs(y = "Pathway",
       title = "TET2mut monocytes:\nTop 10 most up- and \ndownregulated KEGG\npathways") +
  scale_fill_viridis_d() + 
  theme_bw() 
```





## DNMT3A analysis

```{r}
obj_dnmt3a$sample <- paste0(obj_dnmt3a$donor_id, obj_dnmt3a$Clone)


# Aggregate counts to sample level
counts <- AggregateExpression(obj_dnmt3a, 
                              group.by = c("dtu_cell_type", "sample"),
                              assays =  "RNA",
                              return.seurat = FALSE)


counts <- counts$RNA


# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)


# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))


# fix colna"CD14+ Monocyte"# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
    rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x)) #whatever comes after the underscore in the row names will be retained in the final result.
    t(x)
})
```

Looking at the generated list

```{r}
head(cts.split.modified$`B cells`)
```

We need to make a column with metadata for DESeq2.

Getting the count data for monocytes

```{r}
mono_counts <- cts.split.modified$`Classical monocytes`

sample_ids <- colnames(mono_counts)
```

Removing pre-fixes on the colData to get the design.

```{r}
colData <- str_remove(string = sample_ids, pattern = "^(.*?)(?=Mutant|Wildtype)") |> 
  as.data.frame()

base::colnames(colData) <- "condition"
```

We also want the donor IDs, so we can include the donors in the colData. We get the donor names from the sample IDs
```{r}
donor_id <- str_remove(string = sample_ids, pattern = "(Mutant|Wildtype)")
donor_id

colData$donor_id <- donor_id

colData
```



### Differential gene expression analysis

First doing on monocytes as these are the most commonly mutated cells. Count data contained in `mono_counts` colData contained in `colData` The design is stratified in the `column` condition in `colData`.

Doing the DESeq2

```{r}
dds <- DESeqDataSetFromMatrix(countData = mono_counts, 
                                    colData = colData, 
                                    design = ~ donor_id + condition)
```

We perform pre-filtering

```{r}
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
```

Making PCA on VST transformed data
```{r}
library(tidyr)
library(ggrepel)

### Using the VST transformation to get out VST data for the PCA
vst <- vst(object = dds, 
           blind = F)

### Getting counts from the vst object
transformed_data <- assay(vst)


## Performing PC analysis on the data that were taken out from the vst object
pc <- prcomp(t(transformed_data), scale. = T)

## Getting loadings
loadings <- pc |> 
  broom::tidy("rotation") |> 
  pivot_wider(names_from = "PC",
              names_prefix = "PC", 
              values_from = "value") |> 
  arrange(desc(abs(PC1))) |> 
  head(10)

arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)

ggplot(data = loadings, 
       mapping = aes(x = PC1, 
                     y = PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) + 
  geom_label_repel(aes(label = column,
                       max.overlaps = Inf, 
                       force = 3)
                   ) + 
  theme_minimal() + 
  labs(title = "Rotations")
```




```{r}
pc_df <- plotPCA(vst)

plotPCA(vst)

pc_df <- pc_df$data |> 
  as.data.frame()

#Extracting donor names
pc_df <- pc_df |> 
  mutate(donor = str_remove(name, pattern = "(Wildtype|Mutant)$"))

# Plotting
ggplot(data = pc_df, 
       mapping = aes(x = PC1, 
                     y = PC2,
                     color = donor,
                     shape = group)) +
  geom_point(size = 3) +
  theme_bw() +
  labs(color = "Donor", 
       shape = "Mutational status",
       x = "PC1 (82% variance)",
       y = "PC2 (12% variance)") +
  scale_color_viridis_d()

```

Plot above shows that we should not have unpaired samples in the dataframe, as they are highly different in the PCA compared to the paired samples. So much variation in the data could be ascribed to between-donor variation and not due to the mutations in the cells.

We perform the DGE analysis anyway.
```{r}
dds <- DESeq(dds)
```

Plotting dispersion estimates
```{r}
plotDispEsts(dds)
```
Getting results
```{r}
res <- results(dds, contrast=c("condition","Mutant","Wildtype"), alpha = 0.05)

summary(res)
```
No DE genes. 

Getting a dataframe with the results
```{r}
library(tibble)

res_df <- res |> 
  as.data.frame() |>
  rownames_to_column(var = "gene")

View(res_df)
```


Making Volcano plot on p-values (not p-adjusted though)
```{r}
ggplot(data = res_df, 
       mapping = aes(x = log2FoldChange,
                     y = -log10(pvalue))) + 
  geom_point(alpha = 0.2) + 
  geom_point(data = res_df |> 
               filter(-log10(pvalue) > 1.303),
             mapping = aes(x = log2FoldChange, 
                                 y = -log10(pvalue),
                                 label = gene, 
                           color = "red")) +
  geom_label_repel(data = res_df |> 
                     filter(-log10(pvalue) > 1.303), 
                     mapping = aes(x = log2FoldChange, 
                                 y = -log10(pvalue),
                                 label = gene)) +
  theme_bw() +
  labs(title = "Volcano plot of differentially expresssed genes by\nDNMT3Amut vs. DNMT3Awt monocytes",
       subtitle = "Highlighted genes have p-value < 0.05") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) +
  theme(legend.position = "null")
```

### Gene set enrichment analysis

Loading a gene list

```{r}
gs_list <- readRDS("/home/projects/22102_single_cell/day5/gene_sets.Rds")
```

```{r}
res$genes <- rownames(res)

#Add EntrezID for the genes
library(org.Hs.eg.db)

Entrez <- AnnotationDbi::select(org.Hs.eg.db,
                                    key= res$genes, 
                                    columns="ENTREZID",
                                    keytype="SYMBOL")
Entrez <- as_tibble(Entrez)
dds_results <- as.data.frame(res)
dds_results <- inner_join(dds_results, Entrez, by=c("genes"="SYMBOL"))
#Remove those genes that do not have an entrezid
dds_results <- filter(dds_results, !is.na(ENTREZID))
```

```{r}
#Create new metric
dds_results$stat_sig <- -log10(dds_results$pvalue) * sign(dds_results$log2FoldChange)
rankData <- dds_results$stat_sig # Takes out the vector stat_sign with the calculated values
names(rankData) <- dds_results$genes # Takes out the names of the genes in results and assigns it as names in the vector - THIS IS NEW. 
head(rankData)
```

rankData contains non-finite numbers.

```{r}
sum(!is.finite(rankData))
```

In total 24 non-finites.

We could remove these

```{r}
rankData <- rankData[is.finite(rankData)]
```

Running fgsea

```{r}
library(fgsea)
gsea_df <- fgsea(pathways = gs_list, 
      stats = rankData)

#View(gsea_df)
```

Taking bottom and top GSEA pathways

```{r}
gsea_top10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(desc(NES)) |> 
  dplyr::top_n(n = 10, wt = NES)


gsea_bottom10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(NES) |> 
  head(10)

gsea_bound <- rbind(gsea_bottom10, gsea_top10) |> 
  mutate(sign = case_when(pval < 0.05 ~ "significant", 
                          pval >  0.05 ~ "NS"))
```

Plotting

```{r}
library(forcats)

ggplot(data = gsea_bound, 
         mapping = aes(x = NES, 
                     y = fct_reorder(pathway, NES),
                     fill = sign)) +
  geom_col() + 
  labs(y = "Pathway",
       title = "TET2mut monocytes:\nTop 10 most up- and \ndownregulated KEGG\npathways") +
  scale_fill_viridis_d() + 
  theme_bw() 
```














So we have to remove the non-paired samples from each seurat object with TET2 and DNMT3A groupings.

# Constructing new Seurat objects with only paired samples

We first identify which donors belong to which mutation

```{r}
meta_subset <- obj_subset@meta.data

table(meta_subset$Clone_group, meta_subset$donor_id)
```

TET2: Donors CH-21-014 and CH-21-033 DNMT3A: Donors CH-21-006 and CH-21-046

Then we can subset properly

```{r}
obj_dnmt3a <- subset(obj_subset,
                     subset = donor_id %in% c("CH-21-006", "CH-21-046"))

table(obj_dnmt3a@meta.data$Clone_group, obj_dnmt3a@meta.data$dtu_cell_type)
```

```{r}
obj_tet2 <- subset(obj_subset,
                     subset = donor_id %in% c("CH-21-014", "CH-21-033"))

table(obj_tet2@meta.data$Clone_group, obj_tet2@meta.data$dtu_cell_type)
```



# Renanalysis of TET2 and DNMT3A mut vs. wt only

## TET2mut cells vs TET2wt only cells

```{r}
obj_tet2$sample <- paste0(obj_tet2$donor_id, obj_tet2$Clone)


# Aggregate counts to sample level
counts <- AggregateExpression(obj_tet2, 
                              group.by = c("dtu_cell_type", "sample"),
                              assays =  "RNA",
                              return.seurat = FALSE)


counts <- counts$RNA


# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)


# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))


# fix colna"CD14+ Monocyte"# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
    rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x)) #whatever comes after the underscore in the row names will be retained in the final result.
    t(x)
})
```

Looking at the generated list

```{r}
head(cts.split.modified$`B cells`)
```

We need to make a column with metadata for DESeq2.

Getting the count data for monocytes

```{r}
mono_counts <- cts.split.modified$`Classical monocytes`

sample_ids <- colnames(mono_counts)
```

Removing pre-fixes on the colData to get the design.

```{r}
colData <- str_remove(string = sample_ids, pattern = "^(.*?)(?=Mutant|Wildtype)") |> 
  as.data.frame()

base::colnames(colData) <- "condition"

colData$donor <- c("014", "014", "033", "033")


```

Establish DESeq2 object on TET2mut vs. TET2wt monocytes
```{r}
dds <- DESeqDataSetFromMatrix(countData = mono_counts,
                              colData = colData,
                              design = ~ donor + condition)
```
Excluding genes with <10 counts per gene
```{r}
keep <- rowSums(counts(dds)) >= 10

dds <- dds[keep, ]
```


Getting PCA etc. 
```{r}
vst <- vst(dds, blind = T)

plotPCA(vst)


pc_df <- plotPCA(vst)

pc_df <- pc_df$data |> 
  as.data.frame()

#Extracting donor names
pc_df <- pc_df |> 
  mutate(donor = str_remove(name, pattern = "(Wildtype|Mutant)$"))

# Plotting
ggplot(data = pc_df, 
       mapping = aes(x = PC1, 
                     y = PC2,
                     color = donor,
                     shape = group)) +
  geom_point(size = 3) +
  theme_bw() +
  labs(color = "Donor", 
       shape = "Mutational status",
       x = "PC1 (93% variance)",
       y = "PC2 (4% variance)") +
  scale_color_viridis_d()
```



Looking at the levels of the condition

```{r}
levels(dds$condition)
```

Running DESeq2

```{r}
dds <- DESeq(object = dds)
```

Looking at disperson estimates

```{r}
plotDispEsts(object = dds)
```

Looking fine

Getting results

```{r}
res <- results(dds, contrast=c("condition","Mutant","Wildtype"), alpha = 0.1)

summary(res)
```

Most surprisingly, no genes are DE!

Converting to a dataframe

```{r}
res_df <- res |> 
  as.data.frame() |> 
  tibble::rownames_to_column(var = "gene")  |> 
  as_tibble() |>
  arrange(padj)
```

### Volcano plot on TET2mut monocytes vs. TET2wt monocytes
```{r}
ggplot(data = res_df, 
       mapping = aes(x = log2FoldChange,
                     y = -log10(pvalue))) + 
  geom_point() + 
  geom_label_repel(data = res_df |> 
                     filter(-log10(pvalue) > 1), 
                     mapping = aes(x = log2FoldChange, 
                                 y = -log10(pvalue),
                                 label = gene)) +
  theme_bw() +
  labs(title = "Volcano plot of differentially expresssed genes by\nTET2mut vs. TET2wt monocytes") +
  theme(plot.title = element_text(hjust = 0.5))
```




## Gene set enrichment analysis

Loading a gene list

```{r}
gs_list <- readRDS("/home/projects/22102_single_cell/day5/gene_sets.Rds")
```

```{r}
res$genes <- rownames(res)

#Add EntrezID for the genes
library(org.Hs.eg.db)

Entrez <- AnnotationDbi::select(org.Hs.eg.db,
                                    key= res$genes, 
                                    columns="ENTREZID",
                                    keytype="SYMBOL")
Entrez <- as_tibble(Entrez)
dds_results <- as.data.frame(res)
dds_results <- inner_join(dds_results, Entrez, by=c("genes"="SYMBOL"))
#Remove those genes that do not have an entrezid
dds_results <- filter(dds_results, !is.na(ENTREZID))
```

```{r}
#Create new metric
dds_results$stat_sig <- -log10(dds_results$pvalue) * sign(dds_results$log2FoldChange)
rankData <- dds_results$stat_sig # Takes out the vector stat_sign with the calculated values
names(rankData) <- dds_results$genes # Takes out the names of the genes in results and assigns it as names in the vector - THIS IS NEW. 
head(rankData)
```

rankData contains non-finite numbers.

```{r}
sum(!is.finite(rankData))
```

In total 24 non-finites.

We could remove these

```{r}
rankData <- rankData[is.finite(rankData)]
```

Running fgsea

```{r}
library(fgsea)
gsea_df <- fgsea(pathways = gs_list, 
      stats = rankData)

View(gsea_df)
```

Taking bottom and top GSEA pathways

```{r}
gsea_top10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(desc(NES)) |> 
  dplyr::top_n(n = 10, wt = NES)


gsea_bottom10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(NES) |> 
  head(10)

gsea_bound <- rbind(gsea_bottom10, gsea_top10) |> 
  mutate(sign = case_when(padj < 0.05 ~ "significant", 
                          padj >  0.05 ~ "NS"))
```

Plotting

```{r}
library(forcats)

ggplot(data = gsea_bound, 
         mapping = aes(x = NES, 
                     y = fct_reorder(pathway, NES),
                     fill = sign)) +
  geom_col() + 
  labs(y = "Pathway",
       title = "TET2mut monocytes:\nTop 10 most up- and \ndownregulated KEGG pathways") +
  scale_fill_viridis_d() + 
  theme_bw() +
  theme(legend.position = "none")
```





## 
## DNMT3Amut cells vs DNMT3Awt only cells

```{r}
obj_dnmt3a$sample <- paste0(obj_dnmt3a$donor_id, obj_dnmt3a$Clone)


# Aggregate counts to sample level
counts <- AggregateExpression(obj_dnmt3a, 
                              group.by = c("dtu_cell_type", "sample"),
                              assays =  "RNA",
                              return.seurat = FALSE)


counts <- counts$RNA


# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)


# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))


# fix colna"CD14+ Monocyte"# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
    rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x)) #whatever comes after the underscore in the row names will be retained in the final result.
    t(x)
})
```

Looking at the generated list

```{r}
head(cts.split.modified$`B cells`)
```

We need to make a column with metadata for DESeq2.

Getting the count data for monocytes

```{r}
mono_counts <- cts.split.modified$`Classical monocytes`

sample_ids <- colnames(mono_counts)
```

Removing pre-fixes on the colData to get the design.

```{r}
colData <- str_remove(string = sample_ids, pattern = "^(.*?)(?=Mutant|Wildtype)") |> 
  as.data.frame()

base::colnames(colData) <- "condition"

colData$donor <- c("006", "006", "046", "046")
```

Establish DESeq2 object on TET2mut vs. TET2wt monocytes
```{r}
dds <- DESeqDataSetFromMatrix(countData = mono_counts,
                              colData = colData,
                              design = ~ donor + condition)
```
Excluding genes with <10 counts per gene
```{r}
keep <- rowSums(counts(dds)) >= 10

dds <- dds[keep, ]
```


Getting PCA etc. 
```{r}
vst <- vst(dds, blind = T)

plotPCA(vst)


pc_df <- plotPCA(vst)

pc_df <- pc_df$data |> 
  as.data.frame()

#Extracting donor names
pc_df <- pc_df |> 
  mutate(donor = str_remove(name, pattern = "(Wildtype|Mutant)$"))

# Plotting
ggplot(data = pc_df, 
       mapping = aes(x = PC1, 
                     y = PC2,
                     color = donor,
                     shape = group)) +
  geom_point(size = 3) +
  theme_bw() +
  labs(color = "Donor", 
       shape = "Mutational status",
       x = "PC1 (91% variance)",
       y = "PC2 (7% variance)") +
  scale_color_viridis_d()
```



Looking at the levels of the condition

```{r}
levels(dds$condition)
```

Running DESeq2

```{r}
dds <- DESeq(object = dds)
```

Looking at disperson estimates

```{r}
plotDispEsts(object = dds)
```

Looking fine

Getting results

```{r}
res <- results(dds, contrast=c("condition","Mutant","Wildtype"), alpha = 0.1)

summary(res)
```

Most surprisingly, no genes are DE!

Converting to a dataframe

```{r}
res_df <- res |> 
  as.data.frame() |> 
  tibble::rownames_to_column(var = "gene")  |> 
  as_tibble() |>
  arrange(padj)

View(res_df)
```


### Volcano plot on DNMT3Amut monocytes vs. DNMT3Awt monocytes
```{r}
ggplot(data = res_df, 
       mapping = aes(x = log2FoldChange,
                     y = -log10(pvalue))) + 
  geom_point() + 
  geom_point(data = res_df |> 
               filter(-log10(pvalue) > 1.303),
             mapping = aes(x = log2FoldChange, 
                                 y = -log10(pvalue),
                                 label = gene, 
                           color = "red")) +
  geom_label_repel(data = res_df |> 
                     filter(-log10(pvalue) > 1.303), 
                     mapping = aes(x = log2FoldChange, 
                                 y = -log10(pvalue),
                                 label = gene)) +
  theme_bw() +
  labs(title = "Volcano plot of differentially expresssed genes by\nDNMT3Amut vs. DNMT3Awt monocytes",
       subtitle = "Highlighted genes have p-value < 0.05") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) +
  theme(legend.position = "null")

-log10(0.05)
```


## Gene set enrichment analysis

Loading a gene list

```{r}
gs_list <- readRDS("/home/projects/22102_single_cell/day5/gene_sets.Rds")
```

```{r}
res$genes <- rownames(res)

#Add EntrezID for the genes
library(org.Hs.eg.db)

Entrez <- AnnotationDbi::select(org.Hs.eg.db,
                                    key= res$genes, 
                                    columns="ENTREZID",
                                    keytype="SYMBOL")
Entrez <- as_tibble(Entrez)
dds_results <- as.data.frame(res)
dds_results <- inner_join(dds_results, Entrez, by=c("genes"="SYMBOL"))
#Remove those genes that do not have an entrezid
dds_results <- filter(dds_results, !is.na(ENTREZID))
```

```{r}
#Create new metric
dds_results$stat_sig <- -log10(dds_results$pvalue) * sign(dds_results$log2FoldChange)
rankData <- dds_results$stat_sig # Takes out the vector stat_sign with the calculated values
names(rankData) <- dds_results$genes # Takes out the names of the genes in results and assigns it as names in the vector - THIS IS NEW. 
head(rankData)
```

rankData contains non-finite numbers.

```{r}
sum(!is.finite(rankData))
```

In total 24 non-finites.

We could remove these

```{r}
rankData <- rankData[is.finite(rankData)]
```

Running fgsea

```{r}
library(fgsea)
gsea_df <- fgsea(pathways = gs_list, 
      stats = rankData)

View(gsea_df)
```

Taking bottom and top GSEA pathways

```{r}
gsea_top10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(desc(NES)) |> 
  dplyr::top_n(n = 10, wt = NES)


gsea_bottom10 <- gsea_df |> 
  as.data.frame() |> 
  dplyr::arrange(NES) |> 
  head(10)

gsea_bound <- rbind(gsea_bottom10, gsea_top10) |> 
  mutate("P-value" = case_when(pval < 0.05 ~ "P < 0.05",
                               pval >  0.05 ~ "P > 0.05"))
```

Plotting

```{r}
library(forcats)

ggplot(data = gsea_bound, 
         mapping = aes(x = NES, 
                     y = fct_reorder(pathway, NES),
                     fill = `P-value`)) +
  geom_col() + 
  labs(y = "Pathway",
       title = "DNMT3Amut monocytes:\nTop 10 most up- and \ndownregulated KEGG pathways") +
  scale_fill_viridis_d() + 
  theme_bw() 
```


