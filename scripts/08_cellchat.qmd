# Cell-cell communication

```{r}
suppressPackageStartupMessages({
library(CellChat)
library(patchwork)
library(future)
})
options(stringsAsFactors = FALSE)

```

```{r}
data <- readRDS("../data/annotated_data.rds")
```


```{r}
#Create a CellChat object
cellchat <- createCellChat(object = data,
                           meta = data@meta.data,
                           group.by = "dtu_cell_type")
```

```{r}
#Set interaction-ligand database
CellChatDB <- CellChatDB.human 
showDatabaseCategory(CellChatDB)
```

```{r}
# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)
```

```{r}
# use a subset of CellChatDB for cell-cell communication analysis
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") # use Secreted Signaling
#use all CellChatDB for cell-cell communication analysis
#CellChatDB.use <- CellChatDB # simply use the default CellChatDB

# set the used database in the object
cellchat@DB <- CellChatDB.use
```

```{r}
# subset the expression data of signaling genes for saving computation cost
cellchat <- subsetData(cellchat) # This step is necessary if using the whole database
future::plan("multisession", workers = 4) # do parallel
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
```

```{r}
cellchat <- computeCommunProb(cellchat)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat <- filterCommunication(cellchat, min.cells = 10)

#Extract the inferred cellular communication network as a data frame
df.net <- subsetCommunication(cellchat) #returns a data frame consisting of all the inferred cell-cell communications at the level of ligands/receptors. 

#Infer the cell-cell communication at a signaling pathway level
cellchat <- computeCommunProbPathway(cellchat)
```

```{r}
#Calculate the aggregated cell-cell communication network
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
```

```{r}
pathways <- cellchat@netP$pathways

pathways.show <- c("TNF") 

# Circle plot
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
```

```{r}
# Heatmap
par(mfrow=c(1,1))
netVisual_heatmap(cellchat, signaling = pathways.show, color.heatmap = "Reds")
```
```{r}
saveRDS(cellchat, file = "../data/cell_chat_monocyte.rds")

```


# If made before, load cell chat object

```{r}
cell_chat <- readRDS("../data/cell_chat_monocyte.rds")
```

```{r}
# Initialize an empty list to store plots
plot_list <- list()

# Loop over each pathway and generate plots
for (pathway in pathways) {
  # Circle plot
  circle_plot <- netVisual_aggregate(cell_chat, 
                                     signaling = pathway, 
                                     layout = "circle")# +
  #  ggtitle("pathway")

  #heatmap
  par(mfrow=c(1,1))
  heat_plot <- netVisual_heatmap(cell_chat, signaling = pathway, color.heatmap = "Reds")

  # Save the plots in the list
  plot_list[[paste0(pathway, "_circle")]] <- circle_plot
  plot_list[[paste0(pathway, "_heat")]] <- heat_plot

}

# Combine all plots into a patchwork layout
plot_list

```