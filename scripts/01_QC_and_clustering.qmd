# Imports
```{r}
library(Seurat)
```

# Load RAW data
```{r}
raw_data <- readRDS("/home/projects/22102_single_cell_2025/projects/group_1/d72106bd-d03b-45e6-a0fa-ca2a831ef092.rds")
```

# Rename ENSG to gene symbol

Function to do renaming:
```{r}
RenameGenesSeurat <- function(obj,
                              newnames) {
  print("Run this before integration. It only changes obj@assays$RNA@counts, @data and @scale.data.")
  RNA <- obj@assays$RNA

  if (nrow(RNA) == length(newnames)) {
    if (length(RNA@counts)) RNA@counts@Dimnames[[1]]            <- newnames
    if (length(RNA@data)) RNA@data@Dimnames[[1]]                <- newnames
    if (length(RNA@scale.data)) RNA@scale.data@Dimnames[[1]]    <- newnames
  } else {"Unequal gene sets: nrow(RNA) != nrow(newnames)"}
  obj@assays$RNA <- RNA
  return(obj)
}
```

Apply renaming:
```{r}
raw_data <- raw_data |>
  RenameGenesSeurat(newnames = as.character(raw_data@assays[["RNA"]]@meta.features[["feature_name"]]))
```

# Remove leftover ENSG genes
```{r}
# Extract used genes
genes_used <- stringr::str_extract(as.character(raw_data@assays[["RNA"]]@meta.features[["feature_name"]]),
                                   pattern = "^(?!ENSG).+") |>
  na.omit()

# Pull the raw expression matrix from the original Seurat object containing only the genes of interest
subset_matrix <- raw_data@assays[["RNA"]]$counts[genes_used, ]

# Create a new Seurat object with just the genes of interest
seurat_new <- CreateSeuratObject(subset_matrix)

# Pull the identities from the original Seurat object as a data.frame
orig_meta <- raw_data@meta.data

# Add the idents to the meta.data slot
seurat_new <- AddMetaData(object = seurat_new,
                          metadata = orig_meta)

# Overwrite the raw_data object and clear up memory
raw_data <- seurat_new
rm(seurat_new)
```

# Calculate percent mitochondrial genes
Not really as mitochondrial genes have already been removed.
```{r}
#raw_data[["mito_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
 #                                                            pattern = "^MT")
# Or by a list of mitochondrial genes
# mito_list <- c("XXX", "XXX")
# raw_data[["ribo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
#                                                        features = mito_list)
```

# Calculate percent ribosomal genes
```{r}
raw_data[["ribo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
                                                       pattern = "^RP[SL]")

# Or by a list of ribosomal genes
# ribo_list <- c("XXX", "XXX")
# raw_data[["ribo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
#                                                        features = ribo_list)
```

# Calculate percent hemoglobin genes
```{r}
raw_data[["hemo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
                                                       pattern = "^HB")
# Or by a list of hemo genes
# hemo_list <- c("XXX", "XXX")
# raw_data[["ribo_DTU"]] <- Seurat::PercentageFeatureSet(raw_data,
#                                                        features = hemo_list)
```

Providing an AllCells column to the metadata to group on
```{r}
raw_data[["AllCells"]] <- "All"
```


# Violinplot of calculated features
```{r}
VlnPlot(raw_data, features = c("percent.mt",
                               "ribo_DTU",
                               "hemo_DTU"),
        group.by = "AllCells",
        alpha = 0.5)
```
Plotting counts and genes
```{r}
VlnPlot(object = raw_data, features = c("nCount_RNA", "nFeature_RNA"), 
        group.by = "AllCells", alpha = 0.2)
```


Getting metadata for a closer inspection
```{r}
meta_data <- raw_data@meta.data
```



Plotting features and counts vs mitochondrial genes
```{r}
library(tidyverse)
library(patchwork)

p1 <- ggplot(data = meta_data,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = percent.mt)) + 
  geom_point(alpha = 0.3) +
  scale_color_viridis_b() +
  theme_classic()

p2 <- ggplot(data = meta_data,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = hemo_DTU)) + 
  geom_point(alpha = 0.3) +
  scale_color_viridis_b() +
  theme_classic()


p3 <- ggplot(data = meta_data,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = ribo_DTU)) + 
  geom_point(alpha = 0.3) +
  scale_color_viridis_b() +
  theme_classic()

p1 + p2 / p3

```
Cells with a high percentage of mitochondrial genes have both low read count and low number of genes. 
Cells with a high hemoglobin count express few feature (genes) meaning that they are probably red blood cells and should be filtered out.
We cannot conclude anything about ribosomal expression. 

Making boxplots on counts and genes
```{r}
b1 <- ggplot(data = meta_data, 
             mapping = aes(y = nCount_RNA)) +
  geom_boxplot()

b2 <- ggplot(data = meta_data, 
             mapping = aes(y = nFeature_RNA)) +
  geom_boxplot()


b3 <- ggplot(data = meta_data, 
             mapping = aes(y = percent.mt)) +
  geom_boxplot()


b1 + b2 +b3
```



# Apply filtering
```{r}
raw_data <- raw_data |>
  subset(subset = nFeature_RNA > 250 & # Is 250 in paper
                   nFeature_RNA < 2000 &
                   nCount_RNA > 1000 &
                   nCount_RNA < 5000 &
                   percent.mt < 8 &
                   ribo_DTU < 1 &
                   hemo_DTU < 1,
         
                   )
```

Donor IDs to retain
```{r}
donors_to_retain <- c("CH-21-002", "CH-21-013", "CH-21-020", "CH-21-031", "CH-21-0026", "CH-21-046", "CH-21-014", "CH-21-033", "CH-20-004", "CH-21-037", "CH-21-034", "CH-21-029")
```

Subsettting on these donors??????
```{r}
raw_data <- raw_data |> 
  subset(subset = donor_id %in% donors_to_retain)

raw_data
```

Subset metadata
```{r}
meta <- raw_data@meta.data
```

Plotting these samples

```{r}
p1 <- ggplot(data = meta,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = percent.mt)) + 
  geom_point(alpha = 0.3) +
  scale_color_viridis_b() +
  theme_classic()

p2 <- ggplot(data = meta,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = hemo_DTU)) + 
  geom_point(alpha = 0.3) +
  scale_color_viridis_b() +
  theme_classic()


p3 <- ggplot(data = meta,
       mapping = aes(x = nCount_RNA, 
                     y = nFeature_RNA,
                     color = ribo_DTU)) + 
  geom_point(alpha = 0.3) +
  scale_color_viridis_b() +
  theme_classic()

p1 + p2 / p3
```



# Normalize
```{r}
raw_data <- NormalizeData(raw_data)
```

# Find variable features
```{r}
raw_data <- FindVariableFeatures(raw_data, nfeatures = 2000)
```

Plotting the variable features - just for fun
```{r}
p1 <- VariableFeaturePlot(object = raw_data)

top10 <- head(VariableFeatures(object = raw_data, 10))

p2 <- LabelPoints(plot = p1, points = top10, repel = TRUE)

p1 / p2

```



# Scale data
```{r}
raw_data <- ScaleData(raw_data)
```

# Run PCA
```{r}
raw_data <- RunPCA(raw_data)
```

## Find dimensionality
```{r}
ElbowPlot(raw_data, 50)
```

Decide on a number of dimensions to use
```{r}
n_dimensions <- 30
```

# Find clusters
```{r}
raw_data <- FindNeighbors(raw_data, dims = 1:30)
raw_data <- FindClusters(raw_data,
                         resolution = c(0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
```

## Find optimal resolution
```{r}
library(clustree)
clustree(raw_data, prefix = "RNA_snn_res.")
```
Running UMAP without clustering assignments
```{r}
raw_data <- RunUMAP(object = raw_data, dims = 1:n_dimensions, resolution = c(""))
```
Making the UMAP plot
```{r}
DimPlot(object = raw_data, reduction = "umap", group.by = "sex")
```
Making heatmap with call of number of cells per cluster per donor
```{r}
t1 <- table(raw_data$donor_id, raw_data@meta.data$RNA_snn_res.0.7) 

t2 <- t1 |> 
  as.data.frame()

```



Decide on a resolution
```{r}
Idents(pbmc.MTB.cca) <- XXX # e.g. "RNA_snn_res.0.3"
```

# Run UMAP
```{r}
raw_data <- RunUMAP(raw_data,
                    dims = 1:n_dimensions)
```

## Visualize different groupings

See if we observe some clear batch effects or other interesting stuff.
```{r}
views <- c("CHIP", "ProjectID", "MUTATION.GROUP", "scType_celltype", "Clone",
           "cell_type", "disease", "sex", "self_reported_ethnicity",
           "development_stage")

for (view in views) {
  DimPlot(pbmc.MTB_subset,
          reduction = "umap",
          group.by = view)
} 
```

# Save object
```{r}
saveRDS(raw_data, "data/filtered_data.rds")
```


```{r}
meta <- raw_data@meta.data
```


```{r}
table(meta$clone)
```

